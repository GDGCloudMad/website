/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
const url_1 = require('url');
const path_1 = require('path');
const dom5_1 = require('dom5');
const logging = require('plylog');
const logger = logging.getLogger('cli.build.get-dependencies');
/**
 * Detects if a url is external by checking it's protocol. Also checks if it
 * starts with '//', which can be an alias to the page's current protocol
 * in the browser.
 */
function isDependencyExternal(url) {
    // TODO(fks) 08-01-2016: Add additional check for files on current hostname
    // but external to this application root. Ignore them.
    return url_1.parse(url).protocol !== null || url.startsWith('//');
}
exports.isDependencyExternal = isDependencyExternal;
function collectScriptsAndStyles(tree) {
    let scripts = [];
    let styles = [];
    tree.html.script.forEach((script) => {
        // TODO(justinfagnani): stop patching Nodes in Hydrolysis
        let __hydrolysisInlined = script.__hydrolysisInlined;
        if (__hydrolysisInlined) {
            scripts.push(__hydrolysisInlined);
        }
    });
    tree.html.style.forEach((style) => {
        let href = dom5_1.getAttribute(style, 'href');
        if (href) {
            styles.push(href);
        }
    });
    return {
        scripts: scripts,
        styles: styles
    };
}
/**
 * Returns a collection of all local dependencies from a DocumentDescriptor
 * object, ignoring any external dependencies. Because HTML imports can have
 * script and style dependencies of their own, this will recursively call
 * itself down the import tree to collect all dependencies.
 */
function getDependenciesFromDocument(descriptor, dir) {
    let allHtmlDeps = [];
    let allScriptDeps = new Set();
    let allStyleDeps = new Set();
    let deps = collectScriptsAndStyles(descriptor);
    // Collect all script dependencies
    deps.scripts.forEach((scriptDep) => {
        if (isDependencyExternal(scriptDep)) {
            logger.debug('external dependency ignored', { dep: scriptDep });
            return;
        }
        allScriptDeps.add(path_1.posix.join(dir, scriptDep));
    });
    // Collect all style dependencies
    deps.styles.forEach((styleDep) => {
        if (isDependencyExternal(styleDep)) {
            logger.debug('external dependency ignored', { dep: styleDep });
            return;
        }
        allStyleDeps.add(path_1.posix.join(dir, styleDep));
    });
    // Recursively collects and analyzes all HTML imports and their dependencies
    if (descriptor.imports) {
        let queue = descriptor.imports.slice();
        let next;
        while (next = queue.shift()) {
            if (!next.href) {
                continue;
            }
            allHtmlDeps.push(next.href);
            let childDeps = getDependenciesFromDocument(next, path_1.posix.dirname(next.href));
            allHtmlDeps = allHtmlDeps.concat(childDeps.imports);
            childDeps.scripts.forEach((s) => allScriptDeps.add(s));
            childDeps.styles.forEach((s) => allStyleDeps.add(s));
        }
    }
    return {
        scripts: Array.from(allScriptDeps),
        styles: Array.from(allStyleDeps),
        imports: allHtmlDeps,
    };
}
exports.getDependenciesFromDocument = getDependenciesFromDocument;
